version: '3.8'

volumes:
  static:
  media:
  rabbitmq_data:

services:

  db:
    image: postgres:16-alpine
    env_file: .env
    volumes:
      - "C:\\Program Files\\PostgreSQL\\16\\data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./
      dockerfile: ./online_shop/Dockerfile
    env_file: .env
    volumes:
      - ./online_shop:/app
      - static:/backend_static
      - media:/app/media
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery:
    build:
      context: ./
      dockerfile: ./online_shop/Dockerfile
    command: celery -A online_shop worker --loglevel=info
    restart: always
    env_file: .env
    volumes:
      - ./online_shop:/app
      - static:/backend_static
      - media:/app/media
    depends_on:
      backend:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  celery_beat:
    build:
      context: ./
      dockerfile: ./online_shop/Dockerfile
    command: celery -A online_shop beat --loglevel=info
    restart: always
    env_file: .env
    volumes:
      - ./online_shop:/app
      - static:/backend_static
      - media:/app/media
    depends_on:
      backend:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy